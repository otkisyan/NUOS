// ОПРЕДЕЛЯЕТ ЧЕТНОСТЬ ЧИСЛА
// У НЕЧЕТНЫХ ЧИСЕЛ МЛАДШИЙ БИТ - 1, У ЧЕТНЫХ - 0
// 1 байт - 8 бит

#include <stdio.h>
using namespace std;

int f(int x)
{

    unsigned mask = 0x1; // unsigned - целочисленный тип без знака, числа могут быть только положительными
    // 0x1  - 1 (hexadecimal) | 00000001 в двоичном представлении
    // Постановка 0x перед числом позволяет вводить шестнадцатеричные числа в исходный код, например, 0xFF = 255

    return (x & mask); // Битовое И (&)
    // Битовое "И" сравнивает последовательно разряд за разрядом два операнда. Для
    // каждого разряда результат равен 1, тогда и только тогда, когда оба соответствующих
    // разряда операндов равны 1. Так, например, 10010011 & 00111101 = 00010001
    // потому что только нулевой и четвертый разряды обоих операндов содержат 1.
}

int main()
{

    int N = 19;

    printf("The result is %d\n", f(N));         // 19 | 00010011
    printf("The result is %d\n", f(2 * N + 1)); // 39 | 00100111
    printf("The result is %d\n", f(2 * N));     // 38 | 00100110
    return 0;
}

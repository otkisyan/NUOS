// Обход графа в глубину:
// https://www.geeksforgeeks.org/depth-first-search-or-dfs-for-a-graph/
// https://habr.com/ru/company/otus/blog/660725/
// https://habr.com/ru/post/504374/


// “Поиск в глубину” или “обход в глубину” (depth first search) — это рекурсивный алгоритм по поиску всех вершин графа или дерева.
// Обход подразумевает под собой посещение всех вершин графа.
struct Graph2 {

    /*
    * Стандартная реализация поиска в глубину помещает каждую вершину (узел, node) графа в одну из двух категорий:
    * Пройденные (Visited).
    * Не пройденные (Not Visited).
    * Цель алгоритма состоит в том, чтобы пометить каждую вершину как “Пройденная”, избегая при этом циклов.
    */

    // map - ассоциативный контейнер, который работает по принципу ключ-значение
    map<int, bool> visited;

    /*
    * Создаю список смежных вершин для этой вершины
    * Список смежности — один из способов представления графа в виде коллекции списков вершин.
    * Каждой вершине графа соответствует список, состоящий из «соседей» этой вершины.
    */

    // list - это структура данных, которая построена на двусвязных списках.
    // Это значит, что любой элемент знает только о предыдущем и о следующем элементах.
    map<int, list<int>> adjacency;

    // Функция для добавления ребер в граф
    void addEdge(int v, int w);

    // Обход вершин в глубину
    void DFS(int v);

    void DFSHelper();
};

void Graph2::addEdge(int v, int w) {

    // Добавляю w в вектор v
    adjacency[v].push_back(w);
}

void Graph2::DFS(int v) {

    // Помечаю текущий узел как посещенный и печатаю на экран
    visited[v] = true;
    cout << v << " ";

    // Рекурсия для всех вершин, смежных к текущей вершине
    list<int>::iterator i;

    for (i = adjacency[v].begin(); i != adjacency[v].end(); i++)

        if (!visited[*i]) {

            DFS(*i);
        }
}

void Graph2::DFSHelper() {

    for (auto i: adjacency) {

        // Обход начиная со всех вершин по очереди

        if (!visited[i.first]) {

            DFS(i.first);
        }
    }
}

// Составить рекурсивную функцию для обработки списка. 
// Реализовать функцию в виде обычной хвостовой рекурсии 
// и в виде рекурсивной функции с аккумулятором.

// Хвостовая рекурсия:

// В функции с хвостовой рекурсией рекурсивный вызов является последней операцией, 
// выполняемой функцией перед возвратом результата.
// Это позволяет компилятору или интерпретатору оптимизировать код таким образом, 
// что он может заменить рекурсивные вызовы на итеративный процесс, 
// что уменьшает использование стека и памяти.
// Хвостовая рекурсия обычно приводит к более эффективному использованию ресурсов, 
// поскольку она позволяет избежать роста стека при рекурсивных вызовах.

// Рекурсивная функция с аккумулятором:

// В этом случае функция использует дополнительный параметр (аккумулятор) 
// для накопления промежуточных результатов.
// Рекурсивный вызов в функции с аккумулятором может быть в любом месте функции, 
// а не обязательно в конце.
// Этот подход позволяет эффективно передавать и обновлять состояние 
// или промежуточные значения между итерациями.


// Функция для нахождения минимального числа в списке с использованием хвостовой рекурсии
// Рекурсивный вызов функции происходит до тех пор, 
// пока не будет достигнут базовый случай (список с одним элементом), 
// после чего выполнение возвращает значение вверх по стеку вызовов 
// и выполняются сравнения и возвращение минимального числа.
// Таким образом, условие if выполняется после того, 
// как рекурсивный вызов завершает работу и возвращает результаты.
let rec findMinTailRecursive list =
    match list with
    | [] -> failwith "Empty list"
    | [x] -> x
    // The h::t pattern matches the head and tail of the list to the variables h and t.
    | head :: tail -> 
        let minTail = findMinTailRecursive tail
        if head < minTail then head else minTail

// Вспомогательная функция для рекурсивной функции с аккумулятором
let rec findMinAccumulatorHelper acc list =
    match list with
    | [] -> acc
    | head :: tail ->
        let newAcc = if head < acc then head else acc
        findMinAccumulatorHelper newAcc tail

// Функция для нахождения минимального числа в списке с использованием рекурсивной функции с аккумулятором
let findMinWithAccumulator list =
    match list with
    | [] -> failwith "Empty list"
    | head :: tail -> findMinAccumulatorHelper head tail
    
// Пример использования функций
let list1 = [5; 3; 9; -2; 1; 8]
printfn "Минимальное число в списке: %d (с использованием хвостовой рекурсии)" (findMinTailRecursive list1)
printfn "Минимальное число в списке: %d (с использованием рекурсивной функции с аккумулятором)" (findMinWithAccumulator list1)

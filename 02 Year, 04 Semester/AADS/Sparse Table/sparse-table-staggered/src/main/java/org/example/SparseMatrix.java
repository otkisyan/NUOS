package org.example;

import java.util.Random;

public class SparseMatrix {

    private int matrixSize;
    private int vectSize;
    private int[][] matrix;
    private int[] vect;

    public SparseMatrix(int n) {

        matrixSize = n;
        matrix = new int[matrixSize][matrixSize];

        // Цель деления на 2 - удалить половину элементов исходной матрицы,
        // поскольку нулевые элементы расположены в шахматном порядке.
        vectSize = matrixSize * matrixSize / 2;
        vect = new int[vectSize];
    }

    /*
     * Метод newIndex вычисляет индекс элемента в одномерном массиве,
     * основываясь на индексах строки и столбца в двумерной матрице.
     * Он принимает два целых числа i и j, представляющих индексы строки и столбца элемента в матрице,
     * и возвращает целое число, представляющее соответствующий индекс в одномерном массиве.
     *
     * Допустим, matrixSize равен 4. В этом случае матрица будет 4x4, с 16 элементами.
     * Из этих 16 элементов только половина (8 элементов) будет иметь нечетные индексы,
     * т.е. (i + j) % 2 == 1. Эти 8 элементов будут храниться в массиве vect.
     * Теперь рассмотрим вычисление (i * matrixSize + j) для элемента с индексами i = 2 и j = 3.
     * В результате вычисления получится (2 * 4 + 3) = 11. Без деления на 2 это значение было бы индексом элемента в vect.
     * Однако, поскольку массив vect хранит только 8 элементов, а максимальный индекс может быть только 7,
     * мы получим индекс, выходящий за границы.
     *
     * Деление на 2 решает эту проблему, создавая уникальный индекс для каждого значения в матрице.
     * В нашем примере вычисление (2 * 4 + 3) / 2 = 5, что находится в пределах границ массива vect (от 0 до 7).
     * Подводя итог, можно сказать, что деление на 2 в методе newIndex гарантирует,
     * что каждое значение в матрице имеет уникальный соответствующий индекс в массиве vect,
     * и исключает возможность выхода индекса за границы.
     * Это также снижает потребность в хранении разреженного представления матрицы за счет хранения
     * только половины элементов матрицы.
     */

    public int newIndex(int i, int j) {

        return (i * matrixSize + j) / 2;
    }

    public void pack(int i, int j, int value) {

        if ((i + j) % 2 == 1) {

            vect[newIndex(i, j)] = value;
        }
    }

    public int unpack(int i, int j) {

        if ((i + j) % 2 == 1) {

            return vect[newIndex(i, j)];

        } else {

            return 0;
        }
    }

    public void fillMatrix() {

        Random rand = new Random();

        for (int i = 0; i < matrixSize; i++) {

            for (int j = 0; j < matrixSize; j++) {

                // Используя (i + j) % 2, мы получаем сумму индексов текущего элемента в матрице.
                // Если результат этого выражения равен 1, это означает, что индексы элемента имеют разные четности,
                // и элемент находится в строке и столбце с нечетной индексацией.

                // Когда цикл итерирует i=0 и j=0, (i + j) % 2 будет равно 0, поэтому матрица[0][0] будет установлена в 0.
                //
                // При итерациях цикла над i=0 и j=1, (i + j) % 2 будет равно 1,
                // поэтому матрица[0][1] будет установлена в случайное значение от 1 до 100 (генерируется rand.nextInt(1, 100)).
                //
                // При итерациях цикла над i=1 и j=0, (i + j) % 2 будет равно 1,
                // поэтому матрица[1][0] будет установлена в случайное значение от 1 до 100.
                //
                // Когда цикл итерирует i=1 и j=1, (i + j) % 2 будет равен 0, поэтому матрица[1][1] будет установлена в 0.
                if ((i + j) % 2 == 1) {

                    int value = rand.nextInt(1, 100);
                    matrix[i][j] = value;
                    pack(i, j, value);

                } else {

                    matrix[i][j] = 0;
                }
            }
        }
    }

    public void printMatrix() {

        for (int i = 0; i < matrixSize; i++) {

            for (int j = 0; j < matrixSize; j++) {

                System.out.print(matrix[i][j] + "\t");
            }
            System.out.println();
        }
    }

    public void printVect() {

        for (int i = 0; i < vectSize; i++) {

            System.out.print(vect[i] + "\t");
        }
        System.out.println();
    }

    public int[] getVect() {

        return this.vect;
    }

    public int[][] getMatrix() {

        return this.matrix;
    }
}